<?php

namespace Database\Seeders;

use App\Models\Customer;
use App\Models\CustomerAddress;
use App\Models\CustomerPaymentAccount;
use App\Models\Order;
use App\Models\OrderAddress;
use App\Models\OrderItem;
use App\Models\Payment;
use App\Models\Product;
use App\Models\Shipment;
use Illuminate\Database\Seeder;

class TenantOrderDataSeeder extends Seeder
{
    public function run()
    {
        $products = Product::all();

        if ($products->isEmpty()) {
            $this->command->error('No products found! Seed products before running this.');
            return;
        }

        // Create 100 customers over the past 6 months
        Customer::factory(100)->create()->each(function ($customer) use ($products) {
            // Biased signup dates (recent-heavy)
            $signupDate = now()->subDays(fake()->biasedNumberBetween(0, 180, fn($x) => $x ** 1.5));
            $customer->update(['created_at' => $signupDate]);

            CustomerAddress::factory(rand(1, 2))->create(['customer_id' => $customer->id]);

            if (rand(0, 1)) {
                CustomerPaymentAccount::factory()->create(['customer_id' => $customer->id]);
            }

            $ordersCount = rand(1, 5);
            for ($i = 0; $i < $ordersCount; $i++) {
                // Ensure order is after signup but before now
                $orderCreatedAt = fake()->dateTimeBetween($signupDate, now());

                $order = Order::factory()->create([
                    'customer_id' => $customer->id,
                    'created_at' => $orderCreatedAt,
                ]);

                $this->createOrderDetails($order, $products);
            }
        });
    }

    /**
     * Helper method to create order details (items, payments, addresses, shipment).
     */
    protected function createOrderDetails($order, $products)
    {
        $orderItemsCount = rand(1, 5);
        for ($j = 0; $j < $orderItemsCount; $j++) {
            $product = $products->random();

            OrderItem::factory()->create([
                'order_id' => $order->id,
                'product_id' => $product->id,
                'product_name' => $product->name,
                'price' => $product->price,
                'quantity' => rand(1, 3),
            ]);
        }

        $paymentsCount = rand(1, 2);
        for ($k = 0; $k < $paymentsCount; $k++) {
            Payment::factory()->create([
                'order_id' => $order->id,
                'customer_id' => $order->customer_id,
                'amount' => $order->total_amount / $paymentsCount,
            ]);
        }

        OrderAddress::factory()->create(['order_id' => $order->id, 'type' => 'billing']);
        OrderAddress::factory()->create(['order_id' => $order->id, 'type' => 'shipping']);

        if (rand(0, 1)) {
            Shipment::factory()->create(['order_id' => $order->id]);
        }
    }
}
